function toHex(state){
	for (var i = 0; i < state.length; i++) {
		state[i] = toHex2(state[i]);
	};
	return state;
}

function toHex2(arr){
	for (var j = 0; j < arr.length; j++) {
		arr[j] = (arr[j]).toString(16);
	};
	return arr;
}

Sbox = [
	[ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ] ,
	[ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ] ,
	[ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ] ,
	[ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ] ,
	[ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ] ,
	[ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ] ,
	[ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ] ,
	[ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ] ,
	[ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ] ,
	[ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ] ,
	[ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ] ,
	[ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ] ,
	[ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ] ,
	[ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ] ,
	[ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ] ,
	[ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
];

InvSbox = [
	[ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ] ,
	[ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ] ,
	[ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ] ,
	[ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ] ,
	[ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ] ,
	[ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ] ,
	[ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ] ,
	[ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ] ,
	[ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ] ,
	[ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ] ,
	[ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ] ,
	[ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ] ,
	[ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ] ,
	[ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ] ,
	[ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ] ,
	[ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]
];

var Rcon = [ 0x00000000, // Rcon[] is 1-based, so the first entry is just a place holder 
	0x01, 0x02, 0x04, 0x08, 
	0x10, 0x20, 0x40, 0x80, 
	0x1B, 0x36, 0x6C, 0xD8, 
	0xAB, 0x4D, 0x9A, 0x2F, 
	0x5E, 0xBC, 0x63, 0xC6, 
	0x97, 0x35, 0x6A, 0xD4, 
	0xB3, 0x7D, 0xFA, 0xEF, 
	0xC5, 0x91, 0x39, 0x72, 
	0xE4, 0xD3, 0xBD, 0x61, 
	0xC2, 0x9F, 0x25, 0x4A, 
	0x94, 0x33, 0x66, 0xCC, 
	0x83, 0x1D, 0x3A, 0x74, 
	0xE8, 0xCB, 0x8D
];

function ffAdd(x, y){
	return x^y;
}

function addArr(x, y){
	for (var i = 0; i < x.length; i++) {
		x[i] = ffAdd(x[i], y[i]);
	};
	return x;
}

function xTime(x){
	x = x << 1;
	if(x & 0x100){
		x = x^0x11b;
	}
	return x;
}

function ffMultiply (x, y) {
	var retVal;
	var multArr = [2,4,8,16,32,64,128];
	var intermediate = x;
	if(y&1){
		retVal = x;
	}

	for (var i = 0; i < 7; i++) {
		intermediate = xTime(intermediate);
		if(y & multArr[i]){
			retVal = retVal ^ intermediate;
		}
	};
	return retVal;
}

//Key expansion
function subWord(arr, inv){
	var temp;
	for (var i = 0; i < arr.length; i++) {
		temp = arr[i].toString(16);
		if(temp.length == 1){
			temp = '0' + temp;
		}
		var a = temp.charAt(0);
		var b = temp.charAt(1);
		a = parseInt(a,16);
		b = parseInt(b, 16);
		if(inv){
			arr[i] = InvSbox[a][b];
		}else{
			arr[i] = Sbox[a][b];
		}
	};
	return arr;
}

function rotWord (arr) {
	var temp = arr[0];
	arr[0] = arr[1];
	arr[1] = arr[2];
	arr[2] = arr[3];
	arr[3] = temp;
	return arr;
}

/*---------------------------------------------
-----------------------------------------------
			Cipher Function
-----------------------------------------------
---------------------------------------------*/
function subBytes (state) {
	for (var i = 0; i < state.length; i++) {
		state[i] = subWord(state[i], 0);
	};
	return state;
}

function shiftRows (state) {
	var temp1, temp2;
	temp1 = state[0][1];
	state[0][1] = state[1][1];
	state[1][1] = state[2][1];
	state[2][1] = state[3][1];
	state[3][1] = temp1;

	temp1 = state[0][2];
	temp2 = state[1][2];
	state[0][2] = state[2][2];
	state[1][2] = state[3][2];
	state[2][2] = temp1;
	state[3][2] = temp2;

	temp1 = state[3][3];
	state[3][3] = state[2][3];
	state[2][3] = state[1][3];
	state[1][3] = state[0][3];
	state[0][3] = temp1;

	return state;
}

function mixColumns (state) {
	for (var i = 0; i < state.length; i++) {
		var temp = [,,,];
		temp[0] = ffMultiply(0x02, state[i][0]) ^ ffMultiply(0x03, state[i][1]) ^ state[i][2] ^ state[i][3];
		temp[1] = state[i][0] ^ ffMultiply(0x02, state[i][1]) ^ ffMultiply(0x03, state[i][2]) ^ state[i][3];
		temp[2] = state[i][0] ^ state[i][1] ^ ffMultiply(0x02, state[i][2]) ^ ffMultiply(0x03, state[i][3]);
		temp[3] = ffMultiply(0x03, state[i][0]) ^ state[i][1] ^ state[i][2] ^ ffMultiply(0x02, state[i][3]);
		state[i] = temp;
	};
	return state;
}

function addRoundKey (state1, roundKey) {
	for (var i = 0; i < state1.length; i++) {
		state1[i][0] = state1[i][0] ^ roundKey[i][0];
		state1[i][1] = state1[i][1] ^ roundKey[i][1];
		state1[i][2] = state1[i][2] ^ roundKey[i][2];
		state1[i][3] = state1[i][3] ^ roundKey[i][3];
	};
	return state1;
}


/*---------------------------------------------
-----------------------------------------------
			Inverse Cipher Function
-----------------------------------------------
---------------------------------------------*/

function invSubBytes (state) {
	for (var i = 0; i < state.length; i++) {
		state[i] = subWord(state[i], 1);
	};
	return state;
}

function invShiftRows (state) {
	var temp1, temp2;
	temp1 = state[3][1];
	state[3][1] = state[2][1];
	state[2][1] = state[1][1];
	state[1][1] = state[0][1];
	state[0][1] = temp1;


	temp1 = state[0][2];
	temp2 = state[1][2];
	state[0][2] = state[2][2];
	state[1][2] = state[3][2];
	state[2][2] = temp1;
	state[3][2] = temp2;

	temp1 = state[0][3];
	state[0][3] = state[1][3];
	state[1][3] = state[2][3];
	state[2][3] = state[3][3];
	state[3][3] = temp1;

	return state;
}

function invMixColumns (state) {
	for (var i = 0; i < state.length; i++) {
		var temp = [,,,];
		temp[0] = ffMultiply(0x0e, state[i][0]) ^ ffMultiply(0x0b, state[i][1]) ^ ffMultiply(0x0d, state[i][2]) ^ ffMultiply(0x09, state[i][3]);
		temp[1] = ffMultiply(0x09, state[i][0]) ^ ffMultiply(0x0e, state[i][1]) ^ ffMultiply(0x0b, state[i][2]) ^ ffMultiply(0x0d, state[i][3]);
		temp[2] = ffMultiply(0x0d, state[i][0]) ^ ffMultiply(0x09, state[i][1]) ^ ffMultiply(0x0e, state[i][2]) ^ ffMultiply(0x0b, state[i][3]);
		temp[3] = ffMultiply(0x0b, state[i][0]) ^ ffMultiply(0x0d, state[i][1]) ^ ffMultiply(0x09, state[i][2]) ^ ffMultiply(0x0e, state[i][3]);
		state[i] = temp;
	};
	return state;
}

/*---------------------------------------------
-----------------------------------------------
			AES Function
-----------------------------------------------
---------------------------------------------*/

//REDO
function KeyExpansion(key, Nr){
	var i = 0;
	var Nk = key.length;
	Nr = key.length +6;

	var i = key.length;

	while(i< 4 * (Nr+1)){
		var temp = [];
		temp[0] = key[i-1][0];
		temp[1] = key[i-1][1];
		temp[2] = key[i-1][2];
		temp[3] = key[i-1][3];

		if(i % Nk  == 0){
			temp = subWord(rotWord(temp), 0) ;
			temp[0] = temp[0] ^ Rcon[i/Nk];
		}else if(Nk > 6 && i % Nk == 4){
			temp = subWord(temp, 0);
		}
		var keyHolder = [];
		keyHolder[0] = key[i-Nk][0] ^ temp[0];
		keyHolder[1] = key[i-Nk][1] ^ temp[1];
		keyHolder[2] = key[i-Nk][2] ^ temp[2];
		keyHolder[3] = key[i-Nk][3] ^ temp[3];

		key[i] = keyHolder;
		i++;
	}
	return Nr;
}

function Cipher(stateIn, key, Nr){
	var state = stateIn;
	
	addRoundKey(state, [key[0], key[1], key[2], key[3]]);

	for (var i = 1; i < Nr; i++) {
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, [key[4*i], key[4*i+1],key[4*i+2],key[4*i+3]]);
	};

	subBytes(state);
	shiftRows(state);
	addRoundKey(state, [key[key.length-4], key[key.length-3],key[key.length-2],key[key.length-1]]);

	return state;
}

function InvCipher(stateIn, key, Nr){
	var state = stateIn;

	addRoundKey(state, [key[key.length-4], key[key.length-3],key[key.length-2],key[key.length-1]]);

	for(var i = Nr-1; i >0; i--){
		invShiftRows(state);
		invSubBytes(state);
		addRoundKey(state, [key[4*i], key[4*i+1],key[4*i+2],key[4*i+3]]);
		invMixColumns(state);
	}

	invShiftRows(state);
	invSubBytes(state);
	addRoundKey(state, [key[0], key[1], key[2], key[3]]);

	return state;
}



function main(){
	var Nr;
	// var key128 = [
	// 	[0x00, 0x01, 0x02, 0x03],
	// 	[0x04, 0x05, 0x06, 0x07],
	// 	[0x08, 0x09, 0x0a, 0x0b],
	// 	[0x0c, 0x0d, 0x0e, 0x0f]
	// ];

	// var key192 = [
	// 	[0x00, 0x01, 0x02, 0x03],
	// 	[0x04, 0x05, 0x06, 0x07],
	// 	[0x08, 0x09, 0x0a, 0x0b],
	// 	[0x0c, 0x0d, 0x0e, 0x0f],
	// 	[0x10, 0x11, 0x12, 0x13],
	// 	[0x14, 0x15, 0x16, 0x17]

	// ];

	var key256 = [
		[0x00, 0x01, 0x02, 0x03],
		[0x04, 0x05, 0x06, 0x07],
		[0x08, 0x09, 0x0a, 0x0b],
		[0x0c, 0x0d, 0x0e, 0x0f],
		[0x10, 0x11, 0x12, 0x13],
		[0x14, 0x15, 0x16, 0x17],
		[0x18, 0x19, 0x1a, 0x1b],
		[0x1c, 0x1d, 0x1e, 0x1f]

	];

	var state = [
		[0x00, 0x11, 0x22, 0x33],
		[0x44, 0x55, 0x66, 0x77],
		[0x88, 0x99, 0xaa, 0xbb],
		[0xcc, 0xdd, 0xee, 0xff]
	];


	Nr = KeyExpansion(key, Nr);
	// console.log(toHex(Cipher(state, key, Nr)));

	var t = Cipher(state, key, Nr);
	// console.log(toHex(t));
	console.log(toHex(InvCipher(state, key, Nr)));


}